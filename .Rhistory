}
jsonfiles
jsonfile <- jsonfiles[5]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[8]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[11]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[12]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[13]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[14]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile <- jsonfiles[15]
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
files_to_download <- sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
files_to_download <- sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
files_to_download
files_to_download
file_save <- "/home/csaybar/Desktop/cloud_coverage"
file_save <- sprintf("/home/csaybar/Desktop/cloud_coverage/cloud_coverage_%02d.tif", 1:12)
file_save
download.file(files_to_download[1], file_save[1])
files_to_download <- sprintf("https://data.earthenv.org/cloud/MODCF_monthlymean_%02d.tif", 1:12)
file_save <- sprintf("/home/csaybar/Desktop/cloud_coverage/cloud_coverage_%02d.tif", 1:12)
lapply(1:12, function(x) download.file(files_to_download[x], file_save[x]))
lapply(8:12, function(x) download.file(files_to_download[x], file_save[x]))
#
list.files("/home/csaybar/Desktop/cloud_coverage/world")
#
cloudcoverage_files <- list.files("/home/csaybar/Desktop/cloud_coverage/world",full.names = TRUE)
cloudcoverage_files
# list cloud coverage
cloudcoverage_files <- list.files("/home/csaybar/Desktop/cloud_coverage/world",full.names = TRUE)
cloudcoverage_files
# list cloud coverage
library(raster)
cloudcoverage_files <- list.files("/home/csaybar/Desktop/cloud_coverage/world",full.names = TRUE)
cloudcoverage_files
ee$Geometry$Rectangle(coords = c(-81.325, -18.575, -67.175, 1.275))
ee$Geometry$Rectangle(coords = c(-81.325, -18.575, -67.175, 1.275)) %>% ee_as_sf()
pisco_region <- ee$Geometry$Rectangle(coords = c(-81.325, -18.575, -67.175, 1.275)) %>% ee_as_sf()
pisco_region
pisco_region <- ee$Geometry$Rectangle(coords = c(-81.325, -18.575, -67.175, 1.275)) %>%
ee_as_sf() %>%
as("Spatial")
pisco_region
cloudcoverage_files
cloudcoverage_files <- list.files("/home/csaybar/Desktop/cloud_coverage/world",full.names = TRUE) %>% stack()
cloudcoverage_files
crop(cloudcoverage_files, pisco_region)
cloudcoverage_files_peru <- crop(cloudcoverage_files, pisco_region)
cloudcoverage_files_peru
cloudcoverage_files_peru/100
cloudcoverage_files_peru <- cloudcoverage_files_peru/100
cloudcoverage_files_peru
cloudcoverage_files_peru[[1]]
plot(cloudcoverage_files_peru[[1]])
cloudcoverage_files_peru[[1]]
cloudcoverage_files_peru[[1]]
file_save
file_save <- sprintf("/home/csaybar/Desktop/cloud_coverage/peru/cloud_coverage_%02d.tif", 1:12)
file_save
function(x) writeRaster(cloudcoverage_files_peru[[x]], file_save[x])
lapply(1:12, function(x) writeRaster(cloudcoverage_files_peru[[x]], file_save[x]))
library(googledrive)
drive_download("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc")
drive_download("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc", path = "/home/csaybar/Desktop/DDD.db")
as_id("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc")
drive_download(
file = as_id("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc"),
path = "/home/csaybar/Desktop/DDD.db"
)
drive_download(
file = as_id("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc"),
path = "/home/csaybar/Desktop/DDD.db"
)
drive_download(
file = as_id("1aTPIZ974zvtti6a02eiMyZaIf_Rp8QEc"),
path = "/home/csaybar/Desktop/DDD"
)
drive_mime_type("spreadsheet")
drive_mime_type()
drive_mime_type("db")
drive_mime_type(expose())
ds <- drive_mime_type(expose())
ds$mime_type
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
"/home/csaybar/Desktop/dsds.db"
)
lab_lab_user("/home/csaybar/Desktop/cloudsen12/dataset/point_1545/point_1545.iris")
lab_lab_user <- function(path) {
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
sprintf("%s/iris.db", path)
)
}
lab_lab_user("/home/csaybar/Desktop/cloudsen12/dataset/point_1545/point_1545.iris")
metadata_main
output_final
output_final = "cloudsen12/"
output_final
output_final
point_name
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
# 1. Libraries
library(googleCloudStorageR)
library(googledrive)
library(reticulate)
library(tidyverse)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(purrr)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
source("src/utils.R")
ee_cloud <- import("ee_ipl_uv")
# 8. Validation
drive_jsonfile <- drive_ls(
path = as_id("1fBGAjZkjPEpPr0p7c-LtJmfbLq3s87RK")
)
set.seed(100)
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
jsonfiles
jsonfile <- jsonfiles[1]
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile_f
jsonfile_f
jsonfile = jsonfile_f
output_final = "/home/csaybar/Desktop/cloudsen12"
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
# 1. Read JSON file
jsonfile_r <- jsonlite::read_json(jsonfile)
# 2. Identify all the S2 images
s2_idsposition <- which(sapply(strsplit(names(jsonfile_r), "_"), length) == 3)
s2_ids <- sprintf("COPERNICUS/S2/%s", names(jsonfile_r)[s2_idsposition])
# 3. Create a st_point representing the center of the tile (255x255)
st_point <- st_sfc(geometry = st_point(c(jsonfile_r$x, jsonfile_r$y)), crs = 4326)
crs_kernel <- ee$Image(s2_ids[1])$select(0)$projection()$getInfo()$crs
point_utm <- st_transform(st_point, crs_kernel)
ee_point <- ee$Geometry$Point(point_utm[[1]], proj = crs_kernel)
kernel_size
kernel_size = c(255, 255)
output_final = "cloudsen12/"
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
# 1. Read JSON file
jsonfile_r <- jsonlite::read_json(jsonfile)
# 2. Identify all the S2 images
s2_idsposition <- which(sapply(strsplit(names(jsonfile_r), "_"), length) == 3)
s2_ids <- sprintf("COPERNICUS/S2/%s", names(jsonfile_r)[s2_idsposition])
# 3. Create a st_point representing the center of the tile (255x255)
st_point <- st_sfc(geometry = st_point(c(jsonfile_r$x, jsonfile_r$y)), crs = 4326)
crs_kernel <- ee$Image(s2_ids[1])$select(0)$projection()$getInfo()$crs
point_utm <- st_transform(st_point, crs_kernel)
kernel_size
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
point_name
# 1. Read JSON file
jsonfile_r <- jsonlite::read_json(jsonfile)
# 2. Identify all the S2 images
s2_idsposition <- which(sapply(strsplit(names(jsonfile_r), "_"), length) == 3)
s2_ids <- sprintf("COPERNICUS/S2/%s", names(jsonfile_r)[s2_idsposition])
# 3. Create a st_point representing the center of the tile (255x255)
st_point <- st_sfc(geometry = st_point(c(jsonfile_r$x, jsonfile_r$y)), crs = 4326)
crs_kernel <- ee$Image(s2_ids[1])$select(0)$projection()$getInfo()$crs
source("src/utils.R")
ee_cloud <- import("ee_ipl_uv")
# 2. Initialize Earth Engine
ee_Initialize("csaybar", drive = TRUE, gcs = TRUE)
ee_cloud <- import("ee_ipl_uv")
drive_jsonfile
set.seed(100)
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
jsonfiles
jsonfile
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
set.seed(100)
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
# 1. Libraries
library(googleCloudStorageR)
library(googledrive)
library(reticulate)
library(tidyverse)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(purrr)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
source("src/utils.R")
ee_cloud <- import("ee_ipl_uv")
# 2. Initialize Earth Engine
ee_Initialize("csaybar", drive = TRUE, gcs = TRUE)
# 3. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
# 8. Validation
drive_jsonfile <- drive_ls(
path = as_id("1fBGAjZkjPEpPr0p7c-LtJmfbLq3s87RK")
)
set.seed(100)
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
jsonfiles
jsonfile <- jsonfiles[1]
jsonfile
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile_f
jsonfile_f
jsonfile = jsonfile_f
output_final = "/home/csaybar/Desktop/cloudsen12"
jsonfile
kernel_size = c(255, 255)
output_final = "cloudsen12/"
point_name <- paste0("point_", gsub("[a-zA-Z]|_|\\.","", basename(jsonfile)))
point_name
point_name
# 1. Read JSON file
jsonfile_r <- jsonlite::read_json(jsonfile)
# 2. Identify all the S2 images
s2_idsposition <- which(sapply(strsplit(names(jsonfile_r), "_"), length) == 3)
s2_ids <- sprintf("COPERNICUS/S2/%s", names(jsonfile_r)[s2_idsposition])
# 3. Create a st_point representing the center of the tile (255x255)
st_point <- st_sfc(geometry = st_point(c(jsonfile_r$x, jsonfile_r$y)), crs = 4326)
crs_kernel <- ee$Image(s2_ids[1])$select(0)$projection()$getInfo()$crs
point_utm <- st_transform(st_point, crs_kernel)
ee_point <- ee$Geometry$Point(point_utm[[1]], proj = crs_kernel)
# Create cloud-segmentation.json (main file in iris software)
ee_create_cloudseg(path = metadata_main)
metadata_main
# 4.8 Prepare folders for iris
output_final_d <- sprintf("%s/dataset", output_final)
output_final_folder <- sprintf("%s/dataset/%s/%s", output_final, point_name, basename(s2_id))
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_spec <- sprintf("%s/dataset/%s/%s/metadata.json", output_final, point_name, basename(s2_id))
# 3. Create a st_point representing the center of the tile (255x255)
st_point <- st_sfc(geometry = st_point(c(jsonfile_r$x, jsonfile_r$y)), crs = 4326)
crs_kernel <- ee$Image(s2_ids[1])$select(0)$projection()$getInfo()$crs
point_utm <- st_transform(st_point, crs_kernel)
ee_point <- ee$Geometry$Point(point_utm[[1]], proj = crs_kernel)
# 4. Download each image for the specified point
s2_id <- s2_ids[1]
# 1. Read JSON file
jsonfile_r <- jsonlite::read_json(jsonfile)
# 2. Identify all the S2 images
s2_idsposition <- which(sapply(strsplit(names(jsonfile_r), "_"), length) == 3)
s2_ids <- sprintf("COPERNICUS/S2/%s", names(jsonfile_r)[s2_idsposition])
s2_ids
s2_idsposition
message(sprintf("Downloading: %s", s2_id))
# 4.1 S2 ID and dates
s2_img <- ee$Image(s2_id)
s2_date <- ee_get_date_img(s2_img)[["time_start"]]
s1_img <- ee$Image(s1_id)
# 4.2 S1 ID
s1_id <- ee_get_s1(point = ee_point, s2_date = s2_date)
# 4.1 S2 ID and dates
s2_img <- ee$Image(s2_id)
s2_date <- ee_get_date_img(s2_img)[["time_start"]]
message(sprintf("Downloading: %s", s2_id))
# 4.1 S2 ID and dates
s2_img <- ee$Image(s2_id)
s2_date <- ee_get_date_img(s2_img)[["time_start"]]
s2_date
# 4.2 S1 ID
s1_id <- ee_get_s1(point = ee_point, s2_date = s2_date)
s1_img <- ee$Image(s1_id)
# 4.3 Create an Image collection with S2, S1 and cloud mask information
s2_s1_img <- ee_merge_s2_full(s2_id, s1_id, s2_date)
# 4.4 Add the shadow direction
s2_fullinfo <- s2_s1_img %>%
ee$Image$addBands(shadow_direction(image = s2_img))
# 4.5 IPL_UV algorithm ... exist enough images?
IPL_multitemporal_cloud_logical <- ee_upl_cloud_logical(
sen2id = basename(s2_id),
roi =  s2_img$geometry()
)
# 4.6 If IPL_multitemporal_cloud_logical is TRUE add to the EE dataset
if (IPL_multitemporal_cloud_logical) {
IPL_multitemporal_cloud <- ee_upl_cloud(
sen2id = basename(s2_id),
roi =  s2_img$geometry()
) %>% ee$Image$unmask(-999)
s2_fullinfo <- s2_fullinfo %>%
ee$Image$addBands(IPL_multitemporal_cloud)
}
metadata_main
ee_create_cloudseg(path = metadata_main)
metadata_main
# 4.8 Prepare folders for iris
output_final_d <- sprintf("%s/dataset", output_final)
output_final_folder <- sprintf("%s/dataset/%s/%s", output_final, point_name, basename(s2_id))
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_spec <- sprintf("%s/dataset/%s/%s/metadata.json", output_final, point_name, basename(s2_id))
dir.create(sprintf("%s/input", output_final_folder), showWarnings = FALSE, recursive = TRUE)
dir.create(sprintf("%s/target", output_final_folder), showWarnings = FALSE, recursive = TRUE)
dir.create(sprintf("%s/thumbnails", output_final_folder), showWarnings = FALSE, recursive = TRUE)
# Create cloud-segmentation.json (main file in iris software)
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
ee_create_cloudseg(path = metadata_main)
metadata_main
metadata_main
metadata_main
# Create cloud-segmentation.json (main file in iris software)
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_main
output_final
point_name
point_name
# Create cloud-segmentation.json (main file in iris software)
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_main
# 4.8 Prepare folders for iris
output_final_d <- sprintf("%s/dataset", output_final)
output_final_folder <- sprintf("%s/dataset/%s/%s", output_final, point_name, basename(s2_id))
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_spec <- sprintf("%s/dataset/%s/%s/metadata.json", output_final, point_name, basename(s2_id))
output_final = "/home/csaybar/Desktop/cloudsen12"
# 4.8 Prepare folders for iris
output_final_d <- sprintf("%s/dataset", output_final)
output_final_folder <- sprintf("%s/dataset/%s/%s", output_final, point_name, basename(s2_id))
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_spec <- sprintf("%s/dataset/%s/%s/metadata.json", output_final, point_name, basename(s2_id))
dir.create(sprintf("%s/input", output_final_folder), showWarnings = FALSE, recursive = TRUE)
dir.create(sprintf("%s/target", output_final_folder), showWarnings = FALSE, recursive = TRUE)
dir.create(sprintf("%s/thumbnails", output_final_folder), showWarnings = FALSE, recursive = TRUE)
# Create cloud-segmentation.json (main file in iris software)
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
ee_create_cloudseg(path = metadata_main)
path
metadata_main
metadata_main
# Create cloud-segmentation.json (main file in iris software)
metadata_main <- sprintf("%s/dataset/%s/cloud_segmentation_%s.json", output_final, point_name, point_name)
metadata_main
basename(metadata_main)
dirname(metadata_main)
path = dirname(metadata_main)
path = dirname(metadata_main)
path = dirname(metadata_main)
dir.create(path, recursive = TRUE, showWarnings = FALSE)
path
path
point_name
point_name
point_name
sprintf("%s.iris", point_name)
point_name
sprintf("%s%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
dir.create(
sprintf("%s/%s.iris", path, point_name),
recursive = TRUE,
showWarnings = FALSE
)
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
sprintf("%s/iris.db", path)
)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris", path, point_name)
sprintf("%s/%s.iris/iris.db", path, point_name)
sprintf("%s/%s.iris/iris.db", path, point_name)
lab_lab_user <- function(path, point_name) {
dir.create(
sprintf("%s/%s.iris", path, point_name),
recursive = TRUE,
showWarnings = FALSE
)
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
sprintf("%s/%s.iris/iris.db", path, point_name)
)
}
lab_lab_user("/home/csaybar/Desktop/cloudsen12/dataset/point_1545/point_1545.iris")
lab_lab_user <- function(path, point_name) {
dir.create(
sprintf("%s/%s.iris", path, point_name),
recursive = TRUE,
showWarnings = FALSE
)
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
sprintf("%s/%s.iris/iris.db", path, point_name)
)
}
dirname(metadata_main)
point_name
point_name
dirname(metadata_main)
lab_lab_user(path = dirname(metadata_main), point_name = point_name)
#' Create lab:lab user
lab_lab_user <- function(path, point_name) {
dir.create(
sprintf("%s/%s.iris", path, point_name),
recursive = TRUE,
showWarnings = FALSE
)
download.file(
"https://drive.google.com/u/1/uc?id=1BZB3ZIcRnpB0wIEFJCXE5XsH7mh2gI7D&export=download",
sprintf("%s/%s.iris/iris.db", path, point_name)
)
}
# 1. Libraries
library(googleCloudStorageR)
library(googledrive)
library(reticulate)
library(tidyverse)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(purrr)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
source("src/utils.R")
ee_cloud <- import("ee_ipl_uv")
# 2. Initialize Earth Engine
ee_Initialize("csaybar", drive = TRUE, gcs = TRUE)
# 3. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
drive_jsonfile
set.seed(100)
jsonfiles <- drive_jsonfile$name[sample(length(drive_jsonfile$name), 15)]
jsonfiles
for (jsonfile in jsonfiles) {
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
}
jsonfile_f <- search_metajson(pattern = jsonfile, clean = FALSE)
jsonfile_f
dataset_creator_chips(
jsonfile = jsonfile_f,
output_final = "/home/csaybar/Desktop/cloudsen12"
)
