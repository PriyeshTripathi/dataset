index <- 1
for (index in seq_values[-length(seq_values)]) {
xment <- (index + 1):(index + 50)
print(sprintf("%s:%s", min(xment), max(xment)))
landuse[[x]] <- ee_extract(dataset, pot_points_sf$geometry[xment,], scale = 100)[[1]]
x <- x + 1
}
landuse
unlist(landuse)
pot_points_sf
pot_points_sf$value
pot_points_sf$value <- unlist(landuse)
pot_points_sf
unlist(landuse)
plot(unlist(landuse))
dataset <- ee$Image("COPERNICUS/Landcover/100m/Proba-V-C3/Global/2019"
)
dataset$propertyNames()$names()
dataset$getInfo()
classes <- c(
"Unknown",
"Shrubs",
"Herbaceous vegetation",
"Cultivated and managed vegetation / agriculture50 Urban / built up60 Bare / sparse vegetation",
"Snow and ice",
"Permanent water bodies",
"Herbaceous wetland",
"Moss and lichen",
"Closed forest, evergreen needle leaf",
"Closed forest, evergreen broad leaf",
"Closed forest, deciduous needle leaf",
"Closed forest, deciduous broad leaf",
"Closed forest, mixed",
"Closed forest, not matching any of the other definitions121 Open forest, evergreen needle leaf",
"Open forest, evergreen broad leaf",
"Open forest, deciduous needle leaf",
"Open forest, deciduous broad leaf125 Open forest, mixed",
"Open forest, not matching any of the other definitions",
"Oceans, seas. Can be either fresh or salt-water bodies")
dataset$getInfo()
classes
dataset$get("discrete_classification_class_values")
dataset$get("discrete_classification_class_values")$getInfo()
classes
classes <- c(
"Unknown",
"Shrubs",
"Herbaceous vegetation",
"Cultivated and managed vegetation / agriculture50 Urban / built up60 Bare / sparse vegetation",
"Snow and ice",
"Permanent water bodies",
"Herbaceous wetland",
"Moss and lichen",
"Closed forest, evergreen needle leaf",
"Closed forest, evergreen broad leaf",
"Closed forest, deciduous needle leaf",
"Closed forest, deciduous broad leaf",
"Closed forest, mixed",
"Closed forest, not matching any of the other definitions",
"Open forest, evergreen needle leaf",
"Open forest, evergreen broad leaf",
"Open forest, deciduous needle leaf",
"Open forest, deciduous broad leaf125 Open forest, mixed",
"Open forest, not matching any of the other definitions",
"Oceans, seas. Can be either fresh or salt-water bodies")
data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
class_name = classes
)
dataset$get("discrete_classification_class_values")$getInfo()
classes <- c(
"Unknown",
"Shrubs",
"Herbaceous vegetation",
"Cultivated and managed vegetation / agriculture",
"50 Urban / built up",
"60 Bare / sparse vegetation",
"Snow and ice",
"Permanent water bodies",
"Herbaceous wetland",
"Moss and lichen",
"Closed forest, evergreen needle leaf",
"Closed forest, evergreen broad leaf",
"Closed forest, deciduous needle leaf",
"Closed forest, deciduous broad leaf",
"Closed forest, mixed",
"Closed forest, not matching any of the other definitions",
"Open forest, evergreen needle leaf",
"Open forest, evergreen broad leaf",
"Open forest, deciduous needle leaf",
"Open forest, deciduous broad leaf125 Open forest, mixed",
"Open forest, not matching any of the other definitions",
"Oceans, seas. Can be either fresh or salt-water bodies")
data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
class_name = classes
)
classes <- c(
"Unknown",
"Shrubs",
"Herbaceous vegetation",
"Cultivated and managed vegetation / agriculture",
"Urban / built up",
"Bare / sparse vegetation",
"Snow and ice",
"Permanent water bodies",
"Herbaceous wetland",
"Moss and lichen",
"Closed forest, evergreen needle leaf",
"Closed forest, evergreen broad leaf",
"Closed forest, deciduous needle leaf",
"Closed forest, deciduous broad leaf",
"Closed forest, mixed",
"Closed forest, not matching any of the other definitions",
"Open forest, evergreen needle leaf",
"Open forest, evergreen broad leaf",
"Open forest, deciduous needle leaf",
"Open forest, deciduous broad leaf",
"Open forest, mixed",
"Open forest, not matching any of the other definitions",
"Oceans, seas. Can be either fresh or salt-water bodies")
data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
class_name = classes
)
dataset$get("discrete_classification_class_values")$getInfo()
dataset$get("discrete_classification_class_values")$getInfo()
classes
data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
class_name = classes,
palette = dataset$get("discrete_classification_class_palette")$getInfo()
)
df_extra <- data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
class_name = classes,
palette = dataset$get("discrete_classification_class_palette")$getInfo()
)
df_extra
pot_points_sf
pot_points_sf$value
land_values <- pot_points_sf$value
land_values
factor(land_values)
land_values <- factor(pot_points_sf$value)
land_values
levels(land_values)
df_extra
df_extra <- data.frame(
value = dataset$get("discrete_classification_class_values")$getInfo(),
name = classes,
palette = dataset$get("discrete_classification_class_palette")$getInfo()
)
df_extra$name
levels(land_values) <- df_extra$name
land_values
as.character(land_values)
pot_points_sf
as.character(land_values)
as.character(land_values)
pot_points_sf
pot_points_sf$type <- as.character(land_values)
pot_points_sf
pot_points_sf
land_values <- factor(pot_points_sf$value)
levels(land_values) <- df_extra$palette
land_values
land_values
palette
palette
pot_points_sf$palette
pot_points_sf
pot_points_sf$palette <- as.character(land_values)
pot_points_sf
pot_points_sf
pot_points_sf$type
pot_points_sf$value
pot_points_sf$value
table(pot_points_sf$value)
hist(table(pot_points_sf$value))
table(pot_points_sf$value)
hist(table(pot_points_sf$value))
pot_points_sf
pot_points_sf
pot_points_sf
gen_rcloudpoints(10)
gen_rcloudpoints(100)
gen_rcloudpoints(100)
pot_points_sf
pot_points_sf[1450,]
pot_points_sf[1451,]
pot_points_sf[1450,4]
pot_points_sf
pot_points_sf$pcloud_01
pot_points_sf$pcloud_01
length(pot_points_sf$pcloud_01)
1451:length(pot_points_sf$pcloud_01)
1451
length(pot_points_sf$pcloud_01)
1451:length(pot_points_sf$pcloud_01)
length(1451:length(pot_points_sf$pcloud_01))
gen_rcloudpoints(4400)
gen_rcloudpoints(4400)
gcpoints <- gen_rcloudpoints(4400)
gcpoints
gcpoints$V1
plot(gcpoints$V1)
gcpoints$V1
gcpoints$V1
pot_points_sf
pot_points_sf$pcloud_01
length(pot_points_sf$pcloud_01)
1451:5850
pot_points_sf$pcloud_01[1451:5850]
pot_points_sf$pcloud_01[1451:5850] <- gcpoints$V1
gcpoints$V4
gcpoints$V2
gcpoints$V3
gcpoints <- gen_rcloudpoints(4400)
pot_points_sf$pcloud_01[1451:5850] <- gcpoints$V1
pot_points_sf$pcloud_02[1451:5850] <- gcpoints$V2
pot_points_sf$pcloud_03[1451:5850] <- gcpoints$V3
pot_points_sf$pcloud_04[1451:5850] <- gcpoints$V4
pot_points_sf$pcloud_05[1451:5850] <- gcpoints$V5
pot_points_sf
pot_points_sf
pot_points_sf
pot_points_sf
pot_points_sf$pcloud_01
is.na(pot_points_sf$pcloud_01)
any(is.na(pot_points_sf$pcloud_01))
any(is.na(pot_points_sf$pcloud_02))
any(is.na(pot_points_sf$pcloud_04))
any(is.na(pot_points_sf$pcloud_03))
any(is.na(pot_points_sf$pcloud_06))
any(is.na(pot_points_sf$pcloud_05))
plot(pot_points_sf$pcloud_01)
plot(pot_points_sf$pcloud_02)
plot(pot_points_sf$pcloud_03)
plot(pot_points_sf$pcloud_04)
plot(pot_points_sf$pcloud_05)
plot(pot_points_sf$type)
pot_points_sf$type
plot(pot_points_sf$value)
pot_points_sf
pot_points_sf$value
table(pot_points_sf$value)
pot_points_sf
st_write(pot_points_sf, "/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
st_write(pot_points_sf, "/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
ddd
ddd$pcloud_01
plot(ddd$pcloud_01)
sum(ddd$pcloud_01)
sum(ddd$type)
sum(ddd$value)
ddd$value
ddd
is.na(ddd$value)
sum(is.na(ddd$value))
sum(is.na(ddd$type))
sum(is.na(ddd$value))
is.na(ddd$value)
which(is.na(ddd$value))
ddd[which(is.na(ddd$value)),]
plot(ddd[which(is.na(ddd$value)),])
ddd[which(is.na(ddd$value)),]
mapview(ddd[which(is.na(ddd$value)),])
ddd$good
ddd$good <- NA
ddd[which(is.na(ddd$value)),]
ddd[which(is.na(ddd$value)),]$type
ddd[which(is.na(ddd$value)),]$type < 0
ddd[which(is.na(ddd$value)),]$type <- "Unknown"
ddd[which(is.na(ddd$value)),]$value <- 0
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
ddd[which(is.na(ddd$value)),]$type <- "Unknown"
ddd[which(is.na(ddd$value)),]$value <- 0
ddd
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
which(is.na(ddd$value))
to_change <- which(is.na(ddd$value))
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
to_change <- which(is.na(ddd$value))
to_change
to_change
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
to_change <- which(is.na(ddd$value))
ddd[to_change,]
dataset$get("discrete_classification_class_palette")$getInfo()
ddd <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
to_change <- which(is.na(ddd$value))
ddd[to_change,]$type <- "Unknown"
ddd[to_change,]$value <- 0
ddd[to_change,]$palette <- "282828"
ddd
ddd$good
ddd$good <- NA
ddd
ddd$id
is.na(ddd$id)
sum(is.na(ddd$id))
sum(is.na(ddd$type))
sum(is.na(ddd$value))
sum(is.na(ddd$pcloud_01))
sum(is.na(ddd$pcloud_02))
sum(is.na(ddd$pcloud_03))
sum(is.na(ddd$pcloud_04))
sum(is.na(ddd$pcloud_05))
sum(is.na(ddd$good))
sum(is.na(ddd$palette))
write_sf(ddd, "/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
pointss <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
pointss
mapview(pointss)
mapview(pointss, zcol = "value")
mapview(pointss, zcol = "value", col.regions = "palette")
mapview(pointss, zcol = "value", col.regions = pointss$palette)
mapview(pointss, zcol = "value")
pointss
mapview(pointss, zcol = "type")
mapview(pointss, zcol = "type", col.regions = pointss$palette)
pointss$palette
mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette))
pointss
mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette))
mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layers.name = "dd")
mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "dd")
mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12")
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12")
mapshot(m1)
mapshot(m1, url = "/home/csaybar/Desktop/dd/cloudsen12")
library(mapview)
pointss <- st_read("/home/csaybar/Documents/Github/cloudsen12/dataset/data/cloudsen2_potential_points.geojson")
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12")
mapshot(m1, url = "/home/csaybar/Desktop/dd/cloudsen12")
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12", fgb = FALSE)
mapshot(m1,  url = "/home/csaybar/Desktop/dd/cloudsen12")
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12", fgb = T)
mapshot(m1,  url = "/home/csaybar/Desktop/dd/cloudsen12")
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12")
mapviewOptions()
library(mapview)
mapviewOptions(fgb = FALSE)
mapviewOptions(fgb = FALSE)
mapviewOptions()
library(mapview)
mapviewOptions(fgb = FALSE)
m1 <- mapview(pointss, zcol = "type", col.regions = paste0("#", pointss$palette), layer.name = "CloudSEN12")
mapshot(m1,  url = "/home/csaybar/Desktop/dd/cloudsen12")
mapshot(m1,  url = "/home/csaybar/Desktop/dd/index.html")
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
# Display the image.
Map$centerObject(image)
Map$addLayer(image, name = "Landsat 8 original image")
# Load an image.
image <- ee$Image("LANDSAT/LC08/C01/T1/LC08_044034_20140318")
# Load an image.
image <- ee$Image("LANDSAT/LC08/C01/T1/LC08_044034_20140318")
# Display the image.
Map$centerObject(image)
m1 <- Map$addLayer(image, name = "Landsat 8 original image")
m1
m1$rgee$tokens
m1 <- Map$addLayer(image, name = "Landsat 8 original image")
m1
class(m1)
m1$rgee$tokens
m1$rgee$tokens
## Not run:
library(rgee)
ee_Initialize(drive = TRUE, gcs = TRUE)
ee_user_info()
# OPTIONAL display it using Map
Map$centerObject(eeObject = img)
Map$addLayer(eeObject = img, visParams = list(max = 0.4,gamma=0.1))
# Define an image.
img <- ee$Image("LANDSAT/LC08/C01/T1_SR/LC08_038029_20180810")$
select(c("B4", "B3", "B2"))$
divide(10000)
# Define an area of interest.
geometry <- ee$Geometry$Rectangle(
coords = c(-110.8, 44.6, -110.6, 44.7),
proj = "EPSG:4326",
geodesic = FALSE
)
# Define an image.
img <- ee$Image("LANDSAT/LC08/C01/T1_SR/LC08_038029_20180810")$
select(c("B4", "B3", "B2"))$
divide(10000)
# Define an area of interest.
geometry <- ee$Geometry$Rectangle(
coords = c(-110.8, 44.6, -110.6, 44.7),
proj = "EPSG:4326",
geodesic = FALSE
)
## drive - Method 01
# Simple
img_02 <- ee_as_raster(
image = img,
region = geometry,
via = "drive"
)
img_02
img_02@history$metadata
knit_with_parameters('~/Desktop/dsadasd.Rmd')
library(reprex)
library(tidyverse)
library(jsonlite)
# test01 -- json format
json_control_1 <- function(metadata_files) {
sapply(
X = metadata_files,
FUN = function(x) tryCatch(
expr = {jsonlite::read_json(x); FALSE},
error = function(e) TRUE
)
) %>% as.logical()
}
#test02 -- empty JSON
json_control_2 <- function(metadata_files) {
lapply(
X = metadata_files,
FUN = function(x) tryCatch(
expr = {jsonlite::read_json(x) %>% names()},
error = function(e) TRUE
)
)
}
#test03 -- Read comments
json_control_3 <- function(metadata_files) {
lapply(
X = metadata_files,
FUN = function(x) tryCatch(
expr = {
x_com <- jsonlite::read_json(x)[["comments"]]
if (x_com == "PUT_HERE_YOUR_COMMENT") {
NULL
} else {
sprintf("%s: %s",basename(x),  x_com)
}
},
error = function(e) TRUE
)
)
}
# duplicated ID?
json_control_4 <- function(metadata_files) {
lapply(
X = metadata_files,
FUN = function(x) tryCatch(
expr = { any(duplicated(names(jsonlite::read_json(x))))},
error = function(e) TRUE
)
) %>% unlist()
}
#TEST ID
metadata_folder <- "metadata/"
setwd("/home/csaybar/Documents/Github/letters/letter_01/")
#TEST ID
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files[json_control_1(metadata_files)]
#TEST NAME
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files %>%
json_control_2 %>%
sapply(function(x) any(grepl("PUT_HERE_ID", x))) %>%
which() -> id_error
metadata_files[id_error]
metadata_files %>%
json_control_2 %>%
sapply(function(x) any(grepl("PUT_HERE_ID", x))) %>%
which() -> id_error
metadata_files[id_error]
#TEST NAME
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files %>%
json_control_2 %>%
sapply(function(x) any(grepl("PUT_HERE_ID", x))) %>%
which() -> id_error
metadata_files[id_error]
#TEST READ_COMMENTS
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files %>%
json_control_3 %>%
unlist()
#TEST DUPLICATED ID
metadata_files[json_control_4(metadata_files)]
#TEST DUPLICATED ID
metadata_files[json_control_4(metadata_files)]
#TEST ID
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files[json_control_1(metadata_files)]
#TEST NAME
metadata_folder <- "metadata/"
metadata_files <- list.files(metadata_folder, full.names = TRUE)
metadata_files %>%
json_control_2 %>%
sapply(function(x) any(grepl("PUT_HERE_ID", x))) %>%
which() -> id_error
metadata_files[id_error]
