par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
spplot1
lout
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(list("sp.polygons",centroid_pt,border="grey50"), lout),
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
grid.arrange(spplot1, spplot2, nrow = 1)
centroid_pt
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("SpatialPointsDataFrame",centroid_pt),
lout
),
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,border="grey50"),
lout
),
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt),
lout
),
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
grid.arrange(spplot1, spplot2, nrow = 1)
centroid_pt
# label spplot
plot(centroid_pt)
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt),
lout
),
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
label_raster
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
spplot2
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt),
lout
),
cex = 10,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 10),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
grid.arrange(spplot1, spplot2, nrow = 1)
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot2
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
grid.arrange(spplot1, spplot2, nrow = 1)
grid.arrange(spplot1, spplot2, nrow = 2)
label_raster
generate_spplot <-function(rgb, label_raster) {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# generate points form the image
centroid_pt <- as(extent(label_raster), "SpatialPoints") %>%
st_as_sf() %>%
st_centroid() %>%
as("Spatial")
crs(centroid_pt) <- crs(rgb)
centroid_pt$id <- 1:4
# RGB spplot
spplot1 <- spplot(
obj = centroid_pt,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
grid.arrange(spplot1, spplot2, nrow = 1)
}
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot2 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0]
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
# RGB spplot
spplot1 <- spplot(
obj = centroid_pt,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
spplot1
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
auto.key=FALSE
)
spplot1
grid.arrange(spplot1, spplot2, nrow = 1)
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
spplot1
grid.arrange(spplot1, spplot2, nrow = 1)
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha = 0
)
spplot1
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
spplot1
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha = 0
)
spplot1
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
spplot1
grid.arrange(spplot1, spplot2, nrow = 1)
generate_spplot <-function(rgb, label_raster) {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot1 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
grid.arrange(spplot1, spplot2, nrow = 1)
}
svg("/home/csaybar/Desktop/cloudsen12/dataset/point_0922/ddd.svg")
grid.arrange(spplot1, spplot2, nrow = 1)
dev.off()
dev.off()
output = "comparison.svg"
output
dev.off()
generate_spplot <-function(rgb, label_raster, output = "comparison.svg") {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot1 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
svg(output)
grid.arrange(spplot1, spplot2, nrow = 1)
dev.off()
}
generate_spplot(rgb, label_raster)
dev.off()
generate_spplot <-function(rgb, label_raster, output = "comparison.svg") {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot1 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
svg(output)
grid.arrange(spplot1, spplot2, nrow = 1)
on.exit(dev.off())
}
output
generate_spplot <-function(rgb, label_raster, output = "comparison.svg") {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot1 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
svg(output)
grid.arrange(spplot1, spplot2, nrow = 1)
on.exit(dev.off())
}
#' Dilate high-quality results using a 3x3 kernel
#' @noRd
dilate_raster <- function(label_raster) {
# Labels according to cloudsen12
# 0 -> clear
# 1 -> thick cloud
# 2 -> thin cloud
# 3 -> shadow
# Re-order raster value
clear <- (label_raster == 0) * 0
thick_cloud <- (label_raster == 1) * 3
thin_cloud <- (label_raster == 2) * 1
cloud_shadow <- (label_raster == 3) * 2
order_new_r <- clear + thick_cloud + thin_cloud + cloud_shadow
order_new_r_values <- as.matrix(order_new_r)
# 3x3 kernel
(k <- matrix(1,nrow=3, ncol=3))
# dilate raster R
rdilate <- dilate(order_new_r_values, k)
order_new_r[] <- rdilate
# Re-order raster value
clear <- (order_new_r == 0) * 0
thick_cloud <- (order_new_r == 3) * 1
thin_cloud <- (order_new_r == 1) * 2
cloud_shadow <- (order_new_r == 2) * 3
# final_raster
final_r <- clear + thick_cloud + thin_cloud + cloud_shadow
final_r
}
#' Generate previews (in the 5 images)
#' @noRd
generate_preview <- function() {
}
#' Generate a preview in a specific image
#' @noRd
generate_spplot <-function(rgb, label_raster, output = "comparison.svg") {
# Convert RGB to use with spplot
lout <- rgb2spLayout(rgb)
# raster label to factor
label_raster[label_raster == 0] = NA
label_raster_f <- as.factor(label_raster)
# Extract attribute table
rat <- levels(label_raster_f)[[1]]
# Set custom breaks
rat[["classes"]] <- c("thick", "thin", "cloud")
# Add back label_raster_f
levels(label_raster_f) <- rat
# label spplot
spplot1 <- spplot(
obj = label_raster,
sp.layout = list(
list("sp.points",centroid_pt,cex = 0),
lout
),
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE
)
fake_r <- label_raster
fake_r[fake_r >= 0] = NA
fake_r[1,1] = 0
# RGB spplot
spplot1 <- spplot(
obj = fake_r,
sp.layout = lout,
cex = 0,
par.settings = list(axis.line = list(col = "transparent")),
colorkey=FALSE,
alpha.regions = 0
)
svg(output)
grid.arrange(spplot1, spplot2, nrow = 1)
on.exit(dev.off())
}
