#' Create image in cloudsen12
#' @author csaybar
#'
#' Script used to manually select images in cloudsen12.
library(tidyverse)
library(googleCloudStorageR)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
set.seed(101)
source("src/utils.R")
ee_Initialize("fernandoprudencio")
# 1. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
# 2. Classify images in clear, almost clear, low-cloudy, mid-cloudy, cloudy
for (index in 5001:nrow(local_cloudsen2_points)) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
# # 3. Download images!
# for (index in seq_len(nrow(local_cloudsen2_points))) {
#   cloudsen2_row <- local_cloudsen2_points[index,]
#   dataset_creator_chips2(
#     cloudsen2_row = cloudsen2_row,
#     kernel_size = c(255, 255),
#     output = "results/"
#   )
# }
#' Create image in cloudsen12
#' @author csaybar
#'
#' Script used to manually select images in cloudsen12.
library(tidyverse)
library(googleCloudStorageR)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
set.seed(101)
source("src/utils.R")
ee_Initialize("fernandoprudencio")
# 1. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
# 2. Classify images in clear, almost clear, low-cloudy, mid-cloudy, cloudy
for (index in 5001:nrow(local_cloudsen2_points)) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
# # 3. Download images!
# for (index in seq_len(nrow(local_cloudsen2_points))) {
#   cloudsen2_row <- local_cloudsen2_points[index,]
#   dataset_creator_chips2(
#     cloudsen2_row = cloudsen2_row,
#     kernel_size = c(255, 255),
#     output = "results/"
#   )
# }
getwd()
for (index in 5202) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
for (index in 5202) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
#' Create image in cloudsen12
#' @author csaybar
#'
#' Script used to manually select images in cloudsen12.
library(tidyverse)
library(googleCloudStorageR)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
set.seed(101)
source("src/utils.R")
ee_Initialize("fernandoprudencio")
# 1. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
# 2. Classify images in clear, almost clear, low-cloudy, mid-cloudy, cloudy
for (index in 5202) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
# # 3. Download images!
# for (index in seq_len(nrow(local_cloudsen2_points))) {
#   cloudsen2_row <- local_cloudsen2_points[index,]
#   dataset_creator_chips2(
#     cloudsen2_row = cloudsen2_row,
#     kernel_size = c(255, 255),
#     output = "results/"
#   )
# }
index
local_cloudsen2_points[index,]
cloudsen2_row
for (index in 5202) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
# 2. Classify images in clear, almost clear, low-cloudy, mid-cloudy, cloudy
for (index in 5851) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
cloudsen2_row
cloudsen2_row
cloudsen2_row
# 2. Classify images in clear, almost clear, low-cloudy, mid-cloudy, cloudy
for (index in 5852) {
cloudsen2_row <- local_cloudsen2_points[index,]
tryCatch(
expr = {
select_dataset_thumbnail_creator(
cloudsen2_row = cloudsen2_row,
n_images = "max",
kernel_size = c(255, 255),
data_range = c("2018-01-01", "2020-07-31"),
output = "results/"
)
},
error = function(e) e
)
# to_upload <- sprintf("results/point_%s", index) %>% list.files(full.names = TRUE)
# in_gcs <- gsub("results", "metadata_raw", to_upload)
# for (index in seq_along(to_upload)) {
#   googleCloudStorageR::gcs_upload(
#     file = to_upload[index],
#     bucket = "cloudsen12",
#     name = in_gcs[index]
#   )
# }
}
local_cloudsen2_points[index,]
