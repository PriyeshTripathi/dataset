local_cloudsen2_points
# 3. Load points with desired cloud average (after run point_creator.R)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
library(rgee)
library(rgdal)
library(sf)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
setwd("..")
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
# 1. Libraries
library(googleCloudStorageR)
library(googledrive)
library(tidyverse)
library(jsonlite)
library(mapview)
library(mapedit)
library(raster)
library(scales)
library(stars)
library(purrr)
library(grid)
library(rgee)
library(png)
library(sf)
library(sp)
setwd("..")
source("src/utils.R")
setwd("dataset/")
source("src/utils.R")
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
extra_LC <- cloudsen12_lc()
ee_Initialize()
extra_LC <- cloudsen12_lc()
extra_LC
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
local_cloudsen2_points
ee_extract(local_cloudsen2_points[1:10,], extra_LC)
ee_extract(extra_LC, local_cloudsen2_points[1:10,])
local_cloudsen2_points[1:10,]
local_cloudsen2_points
table(local_cloudsen2_points$value)
unique(local_cloudsen2_points$value)
unique(local_cloudsen2_points$value)
extra_LC
local_cloudsen2_points[1:10,]
ee_extract(extra_LC, local_cloudsen2_points[1:10,]$geometry)
ee_extract(extra_LC, local_cloudsen2_points[1:10,]$geometry,scale = 100)
local_cloudsen2_points
landuse_01 <- ee_extract(extra_LC, local_cloudsen2_points$geometry[1:5000], scale = 100)
landuse_01
landuse_02 <- ee_extract(extra_LC, local_cloudsen2_points$geometry[5001:10000], scale = 100)
local_cloudsen2_points$geometry[10001:12000]
length(local_cloudsen2_points$geometry)
landuse_03 <- ee_extract(extra_LC, local_cloudsen2_points$geometry[10001:12023], scale = 100)
landuse_01
c(landuse_01$land_cover, landuse_02$land_cover, landuse_03$land_cover)
landuse_total <- c(landuse_01$land_cover, landuse_02$land_cover, landuse_03$land_cover)
landuse_total
local_cloudsen2_points
landuse_total[2]
local_cloudsen2_points$new_landuse <- landuse_total
local_cloudsen2_points
local_cloudsen2_points$value - local_cloudsen2_points$new_landuse
sum(local_cloudsen2_points$value - local_cloudsen2_points$new_landuse)
sum(local_cloudsen2_points$value - local_cloudsen2_points$new_landuse, na.rm=TRUE)
sum(local_cloudsen2_points$value - local_cloudsen2_points$new_landuse, na.rm = TRUE)
plot(local_cloudsen2_points$value - local_cloudsen2_points$new_landuse)
local_cloudsen2_points$value - local_cloudsen2_points$new_landuse
local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0
!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0
sum(!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0)
sum(!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0, na.rm = TRUE)
!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0
!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0
local_cloudsen2_points[!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0,]
plot(local_cloudsen2_points[!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0, ])
local_cloudsen2_points[!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0, ]
plot(local_cloudsen2_points[!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0, ]$geometry)
local_cloudsen2_points
plot(local_cloudsen2_points[!local_cloudsen2_points$value - local_cloudsen2_points$new_landuse == 0, ]$geometry)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
landuse_total
local_cloudsen2_points$value <- landuse_total
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
extra_LC <- cloudsen12_lc()
landuse_01 <- ee_extract(extra_LC, local_cloudsen2_points$geometry[1:5000], scale = 100)
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
extra_LC <- cloudsen12_lc()
local_cloudsen2_points
local_cloudsen2_points[c("type", "value")]
na.omit(local_cloudsen2_points[c("type", "value")])
na.omit(local_cloudsen2_points[c("type", "value")]) %>% unique
da<- na.omit(local_cloudsen2_points[c("type", "value")]) %>% distinct()
da
da<- na.omit(local_cloudsen2_points[c("type", "value")]) %>% distinct("type")
da
na.omit(local_cloudsen2_points[c("type", "value")])
da <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry()
da
na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique()
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique()
table_sum
table_sum$value
unique(local_cloudsen2_points$value)
table_sum$value
unique(local_cloudsen2_points$value)
table_sum$value %>% length()
unique(local_cloudsen2_points$value) %>% length()
local_cloudsen2_points
local_cloudsen2_points$value
unique(local_cloudsen2_points$value)
is.na(local_cloudsen2_points$value) %>% length()
is.na(local_cloudsen2_points$value) %>% sum()
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique()
table_sum
local_cloudsen2_points$value <- landuse_total
local_cloudsen2_points
local_cloudsen2_points$value
unique(local_cloudsen2_points$value)
table_sum$value
unique(local_cloudsen2_points$value)
table_sum
local_cloudsen2_points$value
as.factor(local_cloudsen2_points$value)
landuse_factor <- as.factor(local_cloudsen2_points$value)
landuse_factor
table_sum
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique() %>% arrange()
table_sum
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique() %>% arrange("value")
table_sum
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique() %>% arrange(value)
table_sum
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
extra_LC <- cloudsen12_lc()
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique() %>% arrange(value)
table_sum
local_cloudsen2_points$value <- landuse_total
landuse_factor <- as.factor(local_cloudsen2_points$value)
landuse_factor
table_sum$type
levels(landuse_factor) <- table_sum$type
landuse_factor
local_cloudsen2_points
local_cloudsen2_points$type <- landuse_factor
local_cloudsen2_points
extra_LC$getInfo()
ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")$getInfo()
ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")$get("discrete_classification_class_palette")$getInfo()
#
pallete <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")$
get("discrete_classification_class_palette")$
getInfo()
pallete
pallete <- ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")
pallete
#
pallete$propertyNames()$getInfo()
#
pallete$getInfo()
#
(pallete %>% ee_get(5))$propertyNames()$getInfo()
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))$
get("discrete_classification_class_palette")$
getInfo()
pallete
pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))
pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))$first()$
get("discrete_classification_class_palette")$
getInfo()
(ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))$first()
(ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))$first()$
get("discrete_classification_class_palette")$
getInfo()
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(5))$first()$
getInfo()
pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(4))$
getInfo()
pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(4))$first()$
getInfo()
pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(4))$first()$
get("discrete_classification_class_palette")$
getInfo()
pallete
landuse_factor <- as.factor(local_cloudsen2_points$value)
landuse_factor
levels(landuse_factor)
length(levels(landuse_factor))
length(pallete)
levels(landuse_factor) <- pallete
landuse_factor
local_cloudsen2_points$palette <- landuse_factor
local_cloudsen2_points
local_cloudsen2_points
# probabilities
local_cloudsen2_points
# probabilities
sort(local_cloudsen2_points)
# probabilities
local_cloudsen2_points %>% arrange(id)
# Cloud probability (range of interest) to pick up images
gen_rcloudpoints <- function(n) {
# groups_n <- floor(c(0.05,0.3,0.3,0.3,0.05)*n)
cloud_ppoints <- list()
for (index in seq_len(n)) {
groups_n <- rep(1, 5)
# if (sum(groups_n) != n) {
#   difff <- n - sum(groups_n)
#   random_add <- sample(5,1)
#   groups_n[random_add] <- groups_n[random_add] + difff
# }
cloud_ppoints[[index]] <- c(
runif(n = groups_n[1], min = 0, max = 10),  # clear
runif(n = groups_n[2], min = 10, max = 25), # almost clear
runif(n = groups_n[3], min = 25, max = 45), # low-cloudy
runif(n = groups_n[4], min = 45, max = 65), # mid-cloudy
runif(n = groups_n[5], min = 65, max = 100)) # cloudy
}
cloud_ppoints %>%
as.data.frame() %>%
`colnames<-`(NULL) %>%
t %>%
as.data.frame()
}
gen_rcloudpoints(10)
local_cloudsen2_points
local_cloudsen2_points[5850,]
local_cloudsen2_points[5850:5860,]
local_cloudsen2_points[5850,]
local_cloudsen2_points$id
# probabilities
local_cloudsen2_points <- local_cloudsen2_points %>% arrange(id)
local_cloudsen2_points[5850:5860,]
5851:length(local_cloudsen2_points)
length(5851:length(local_cloudsen2_points))
gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
local_cloudsen2_points[5851:5860,]
local_cloudsen2_points[5851:5860,4:8]
gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
local_cloudsen2_points[5851:5860,4:8]
local_cloudsen2_points[5851:5860,4:8] <- gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
local_cloudsen2_points
local_cloudsen2_points[5851:5860,]
local_cloudsen2_points[5851:5860,4:8]
local_cloudsen2_points[5851:5860,4:8] <- gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
# probabilities
local_cloudsen2_points <- local_cloudsen2_points %>% arrange(id) %>% as.data.frame()
local_cloudsen2_points
local_cloudsen2_points <- read_sf("data/cloudsen2_potential_points.geojson")
extra_LC <- cloudsen12_lc()
table_sum <- na.omit(local_cloudsen2_points[c("type", "value")]) %>% st_drop_geometry() %>% unique() %>% arrange(value)
local_cloudsen2_points$value <- landuse_total
#landuse
landuse_factor <- as.factor(local_cloudsen2_points$value)
levels(landuse_factor) <- table_sum$type
local_cloudsen2_points$type <- landuse_factor
# pallete
pallete <- (ee$ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global") %>% ee_get(4))$first()$
get("discrete_classification_class_palette")$
getInfo()
landuse_factor <- as.factor(local_cloudsen2_points$value)
levels(landuse_factor) <- pallete
local_cloudsen2_points$palette <- landuse_factor
# probabilities
local_cloudsen2_points <- local_cloudsen2_points %>% arrange(id)
local_cloudsen2_points
local_cloudsen2_points[5851:5860,4:8]
set.seed(100)
new_probs <- gen_rcloudpoints(length(5851:length(local_cloudsen2_points)))
new_probs
local_cloudsen2_points[5851:5860,4] <- new_probs$V1
new_probs$V1
local_cloudsen2_points[5851:5860,4]
local_cloudsen2_points[5851:5860,]$pcloud_01
local_cloudsen2_points
local_cloudsen2_points[5851:5860,]
length(local_cloudsen2_points)
nrow(local_cloudsen2_points)
local_cloudsen2_points[5851:12023,]$pcloud_01 <- new_probs$V1
local_cloudsen2_points[5851:12023,]$pcloud_01
new_probs$V1
local_cloudsen2_points[5851:12023,]$pcloud_01 <- new_probs$V1
length(local_cloudsen2_points))
length(local_cloudsen2_points)
new_probs <- gen_rcloudpoints(length(5851:nrow(local_cloudsen2_points)))
new_probs
local_cloudsen2_points[5851:12023,4:8]
local_cloudsen2_points[5851:12023,4:8] <- new_probs
local_cloudsen2_points
local_cloudsen2_points[5851:12023,4:8]
local_cloudsen2_points
mapview::mapview(local_cloudsen2_points["type"])
local_cloudsen2_points$pcloud_01
anyNA(local_cloudsen2_points$pcloud_01)
local_cloudsen2_points
write_sf(local_cloudsen2_points, "data/cloudsen2_potential_points.geojson")
write_sf(local_cloudsen2_points, "data/cloudsen2_potential_points.geojson")
mapview(local_cloudsen2_points,zvalue = "type")
mapview(local_cloudsen2_points, zcol = "type")
m1 <- mapview(local_cloudsen2_points, zcol = "type")
mapshot(m1, "/home/csaybar/Documents/Github/cloudsen12/map/index.html")
mapviewOptions(fgb = FALSE)
m1 <- mapview(local_cloudsen2_points, zcol = "type")
m1
mapshot(m1, "/home/csaybar/Documents/Github/cloudsen12/map/index.html")
data <- ee$FeatureCollection("users/Majaliwa117/Oryxloc") %>% ee_as_sf()
#Load librairies
require(rgee)
require(sf)
require(magick)
require(tidyverse)
#Importing data from google earth engine directly
data <- ee$FeatureCollection("users/Majaliwa117/Oryxloc") %>% ee_as_sf()
#Initialize the google earth engine
ee_Initialize()
#Importing data from google earth engine directly
data <- ee$FeatureCollection("users/Majaliwa117/Oryxloc") %>% ee_as_sf()
data
data$Date
#Importing data from google earth engine directly
data <- ee$FeatureCollection("users/Majaliwa117/Oryxloc") %>% ee_as_sf()
data$Date <- (seq(as.POSIXct("2016-08-01"),as.POSIXct("2016-09-19"),"day") %>% as.numeric())*1000
data <- sf_as_ee(data)
#Retrieve the MODIS Terra Vegetation Indices 16-Day Global 250m dataset as an ee.ImageCollection and select the NDVI band.
modsr<-ee$ImageCollection('MODIS/006/MOD13Q1')$filterDate("2016-08-01","2020-11-01")
# Define a max difference filter to compare timestamps.
maxDiffFilter<-ee$Filter$maxDifference(
difference=8*24*60*60*1000, #8 days * hr * min * sec * milliseconds
leftField="system:time_start", #Date data was collected
rightField="Date" #Image date
)
# Define the join.
saveBestJoin<-ee$Join$saveBest(
matchKey="bestImage",
measureKey="timeDiff"
)
# Apply the join.
Data_match <- saveBestJoin$apply(modsr, data, maxDiffFilter)
Data_match$size()$getInfo()
#Function to add property with NDVI value from the matched MODIS image
add_NDVI<-function(feature){
img1<-ee$Image(feature$get("bestImage"))$select("NDVI")
point<-feature$geometry()
NDVI_value <- img1$sample(region=point, scale=250)
feature$set(list(ndvi= NDVI_value$first()$get('NDVI')))
}
#Add NDVI to the data
DataFinal <- Data_match$map(add_NDVI)
ee_as_sf(DataFinal)
DataFinal
DataFinal$getInfo()
#Add NDVI to the data
DataFinal <- Data_match$map(add_NDVI)
# Function to remove NDVI image property from features
removeProperty<- function(feature) {
#Get the properties of the data
properties = feature$propertyNames()
#Select all items except images
selectProperties = properties$filter(ee$Filter$neq("item", "bestImage"))
#Return selected features
feature$select(selectProperties)
}
#Remove image property from the data
DataFinal <- DataFinal$map(removeProperty)
#Printing the first rows of the data
ee_print(DataFinal$limit(5))
# Define a max difference filter to compare timestamps.
maxDiffFilter<-ee$Filter$maxDifference(
difference=8*24*60*60*1000, #8 days * hr * min * sec * milliseconds
leftField="system:time_start", #Date data was collected
rightField="Date" #Image date
)
# Define the join.
saveBestJoin<-ee$Join$saveBest(
matchKey="bestImage",
measureKey="timeDiff"
)
# Apply the join.
Data_match <- saveBestJoin$apply(modsr, data, maxDiffFilter)
Data_match
#Function to add property with NDVI value from the matched MODIS image
add_NDVI<-function(feature){
img1<-ee$Image(feature$get("bestImage"))$select("NDVI")
point<-feature$geometry()
NDVI_value <- img1$sample(region=point, scale=250)
feature$set(list(ndvi= NDVI_value$first()$get('NDVI')))
}
#Add NDVI to the data
DataFinal <- Data_match$map(add_NDVI)
DataFinal$getInfo()
# Define the join.
saveBestJoin<-ee$Join$saveBest(
matchKey="bestImage",
measureKey="timeDiff"
)
# Apply the join.
Data_match <- saveBestJoin$apply(modsr, data, maxDiffFilter)
Data_match$getInfo()
#Function to add property with NDVI value from the matched MODIS image
add_NDVI<-function(feature){
img1<-ee$Image(feature$get("bestImage"))$select("NDVI")
point<-feature$geometry()
NDVI_value <- img1$sample(region=point, scale=250)
feature$set(list(ndvi= NDVI_value$first()$get('NDVI')))
}
Data_match
#Add NDVI to the data
DataFinal <- Data_match$map(add_NDVI)
DataFinal$getInfo()
Map$addLayer(Data_match)
Data_match
